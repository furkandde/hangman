// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message.proto

#include "message.pb.h"
#include "message.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace message {

static const char* Hangman_method_names[] = {
  "/message.Hangman/PlayHangman",
};

std::unique_ptr< Hangman::Stub> Hangman::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Hangman::Stub> stub(new Hangman::Stub(channel, options));
  return stub;
}

Hangman::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PlayHangman_(Hangman_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::message::HangmanRequest, ::message::HangmanResponse>* Hangman::Stub::PlayHangmanRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::message::HangmanRequest, ::message::HangmanResponse>::Create(channel_.get(), rpcmethod_PlayHangman_, context);
}

void Hangman::Stub::async::PlayHangman(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::message::HangmanRequest,::message::HangmanResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::message::HangmanRequest,::message::HangmanResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_PlayHangman_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::message::HangmanRequest, ::message::HangmanResponse>* Hangman::Stub::AsyncPlayHangmanRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::message::HangmanRequest, ::message::HangmanResponse>::Create(channel_.get(), cq, rpcmethod_PlayHangman_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::message::HangmanRequest, ::message::HangmanResponse>* Hangman::Stub::PrepareAsyncPlayHangmanRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::message::HangmanRequest, ::message::HangmanResponse>::Create(channel_.get(), cq, rpcmethod_PlayHangman_, context, false, nullptr);
}

Hangman::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Hangman_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Hangman::Service, ::message::HangmanRequest, ::message::HangmanResponse>(
          [](Hangman::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::message::HangmanResponse,
             ::message::HangmanRequest>* stream) {
               return service->PlayHangman(ctx, stream);
             }, this)));
}

Hangman::Service::~Service() {
}

::grpc::Status Hangman::Service::PlayHangman(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::message::HangmanResponse, ::message::HangmanRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace message

