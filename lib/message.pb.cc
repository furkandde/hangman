// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace message {
template <typename>
PROTOBUF_CONSTEXPR HangmanRequest::HangmanRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guess_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HangmanRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HangmanRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HangmanRequestDefaultTypeInternal() {}
  union {
    HangmanRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HangmanRequestDefaultTypeInternal _HangmanRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HangmanResponse::HangmanResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.word_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.remaining_attempts_)*/ 0

  , /*decltype(_impl_.game_over_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HangmanResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HangmanResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HangmanResponseDefaultTypeInternal() {}
  union {
    HangmanResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HangmanResponseDefaultTypeInternal _HangmanResponse_default_instance_;
}  // namespace message
static ::_pb::Metadata file_level_metadata_message_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_message_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_message_2eproto = nullptr;
const ::uint32_t TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::message::HangmanRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::message::HangmanRequest, _impl_.guess_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::message::HangmanResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::message::HangmanResponse, _impl_.word_),
    PROTOBUF_FIELD_OFFSET(::message::HangmanResponse, _impl_.remaining_attempts_),
    PROTOBUF_FIELD_OFFSET(::message::HangmanResponse, _impl_.game_over_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::message::HangmanRequest)},
        { 9, -1, -1, sizeof(::message::HangmanResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::message::_HangmanRequest_default_instance_._instance,
    &::message::_HangmanResponse_default_instance_._instance,
};
const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\rmessage.proto\022\007message\"\037\n\016HangmanReque"
    "st\022\r\n\005guess\030\001 \001(\t\"N\n\017HangmanResponse\022\014\n\004"
    "word\030\001 \001(\t\022\032\n\022remaining_attempts\030\002 \001(\005\022\021"
    "\n\tgame_over\030\003 \001(\0102O\n\007Hangman\022D\n\013PlayHang"
    "man\022\027.message.HangmanRequest\032\030.message.H"
    "angmanResponse(\0010\001b\006proto3"
};
static ::absl::once_flag descriptor_table_message_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_message_2eproto = {
    false,
    false,
    226,
    descriptor_table_protodef_message_2eproto,
    "message.proto",
    &descriptor_table_message_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_message_2eproto::offsets,
    file_level_metadata_message_2eproto,
    file_level_enum_descriptors_message_2eproto,
    file_level_service_descriptors_message_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_message_2eproto_getter() {
  return &descriptor_table_message_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
namespace message {
// ===================================================================

class HangmanRequest::_Internal {
 public:
};

HangmanRequest::HangmanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.HangmanRequest)
}
HangmanRequest::HangmanRequest(const HangmanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HangmanRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guess_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.guess_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.guess_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guess().empty()) {
    _this->_impl_.guess_.Set(from._internal_guess(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:message.HangmanRequest)
}

inline void HangmanRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.guess_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.guess_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.guess_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HangmanRequest::~HangmanRequest() {
  // @@protoc_insertion_point(destructor:message.HangmanRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HangmanRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.guess_.Destroy();
}

void HangmanRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HangmanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:message.HangmanRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.guess_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HangmanRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string guess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_guess();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.HangmanRequest.guess"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HangmanRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.HangmanRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string guess = 1;
  if (!this->_internal_guess().empty()) {
    const std::string& _s = this->_internal_guess();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "message.HangmanRequest.guess");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.HangmanRequest)
  return target;
}

::size_t HangmanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.HangmanRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string guess = 1;
  if (!this->_internal_guess().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_guess());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HangmanRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HangmanRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HangmanRequest::GetClassData() const { return &_class_data_; }


void HangmanRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HangmanRequest*>(&to_msg);
  auto& from = static_cast<const HangmanRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.HangmanRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_guess().empty()) {
    _this->_internal_set_guess(from._internal_guess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HangmanRequest::CopyFrom(const HangmanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.HangmanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HangmanRequest::IsInitialized() const {
  return true;
}

void HangmanRequest::InternalSwap(HangmanRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.guess_, lhs_arena,
                                       &other->_impl_.guess_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata HangmanRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[0]);
}
// ===================================================================

class HangmanResponse::_Internal {
 public:
};

HangmanResponse::HangmanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.HangmanResponse)
}
HangmanResponse::HangmanResponse(const HangmanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HangmanResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.word_) {}

    , decltype(_impl_.remaining_attempts_) {}

    , decltype(_impl_.game_over_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.word_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.word_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_word().empty()) {
    _this->_impl_.word_.Set(from._internal_word(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.remaining_attempts_, &from._impl_.remaining_attempts_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.game_over_) -
    reinterpret_cast<char*>(&_impl_.remaining_attempts_)) + sizeof(_impl_.game_over_));
  // @@protoc_insertion_point(copy_constructor:message.HangmanResponse)
}

inline void HangmanResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.word_) {}

    , decltype(_impl_.remaining_attempts_) { 0 }

    , decltype(_impl_.game_over_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.word_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.word_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HangmanResponse::~HangmanResponse() {
  // @@protoc_insertion_point(destructor:message.HangmanResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HangmanResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.word_.Destroy();
}

void HangmanResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HangmanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.HangmanResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.word_.ClearToEmpty();
  ::memset(&_impl_.remaining_attempts_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.game_over_) -
      reinterpret_cast<char*>(&_impl_.remaining_attempts_)) + sizeof(_impl_.game_over_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HangmanResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string word = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_word();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.HangmanResponse.word"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 remaining_attempts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.remaining_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool game_over = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.game_over_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HangmanResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.HangmanResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string word = 1;
  if (!this->_internal_word().empty()) {
    const std::string& _s = this->_internal_word();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "message.HangmanResponse.word");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 remaining_attempts = 2;
  if (this->_internal_remaining_attempts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_remaining_attempts(), target);
  }

  // bool game_over = 3;
  if (this->_internal_game_over() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_game_over(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.HangmanResponse)
  return target;
}

::size_t HangmanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.HangmanResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string word = 1;
  if (!this->_internal_word().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_word());
  }

  // int32 remaining_attempts = 2;
  if (this->_internal_remaining_attempts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_remaining_attempts());
  }

  // bool game_over = 3;
  if (this->_internal_game_over() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HangmanResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HangmanResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HangmanResponse::GetClassData() const { return &_class_data_; }


void HangmanResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HangmanResponse*>(&to_msg);
  auto& from = static_cast<const HangmanResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.HangmanResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_word().empty()) {
    _this->_internal_set_word(from._internal_word());
  }
  if (from._internal_remaining_attempts() != 0) {
    _this->_internal_set_remaining_attempts(from._internal_remaining_attempts());
  }
  if (from._internal_game_over() != 0) {
    _this->_internal_set_game_over(from._internal_game_over());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HangmanResponse::CopyFrom(const HangmanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.HangmanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HangmanResponse::IsInitialized() const {
  return true;
}

void HangmanResponse::InternalSwap(HangmanResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.word_, lhs_arena,
                                       &other->_impl_.word_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HangmanResponse, _impl_.game_over_)
      + sizeof(HangmanResponse::_impl_.game_over_)
      - PROTOBUF_FIELD_OFFSET(HangmanResponse, _impl_.remaining_attempts_)>(
          reinterpret_cast<char*>(&_impl_.remaining_attempts_),
          reinterpret_cast<char*>(&other->_impl_.remaining_attempts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HangmanResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message::HangmanRequest*
Arena::CreateMaybeMessage< ::message::HangmanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::HangmanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::message::HangmanResponse*
Arena::CreateMaybeMessage< ::message::HangmanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::HangmanResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
