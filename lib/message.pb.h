// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_message_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_message_2eproto;
namespace message {
class HangmanRequest;
struct HangmanRequestDefaultTypeInternal;
extern HangmanRequestDefaultTypeInternal _HangmanRequest_default_instance_;
class HangmanResponse;
struct HangmanResponseDefaultTypeInternal;
extern HangmanResponseDefaultTypeInternal _HangmanResponse_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template <>
::message::HangmanRequest* Arena::CreateMaybeMessage<::message::HangmanRequest>(Arena*);
template <>
::message::HangmanResponse* Arena::CreateMaybeMessage<::message::HangmanResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace message {

// ===================================================================


// -------------------------------------------------------------------

class HangmanRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.HangmanRequest) */ {
 public:
  inline HangmanRequest() : HangmanRequest(nullptr) {}
  ~HangmanRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HangmanRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HangmanRequest(const HangmanRequest& from);
  HangmanRequest(HangmanRequest&& from) noexcept
    : HangmanRequest() {
    *this = ::std::move(from);
  }

  inline HangmanRequest& operator=(const HangmanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HangmanRequest& operator=(HangmanRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HangmanRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HangmanRequest* internal_default_instance() {
    return reinterpret_cast<const HangmanRequest*>(
               &_HangmanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HangmanRequest& a, HangmanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HangmanRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HangmanRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HangmanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HangmanRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HangmanRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HangmanRequest& from) {
    HangmanRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HangmanRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "message.HangmanRequest";
  }
  protected:
  explicit HangmanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuessFieldNumber = 1,
  };
  // string guess = 1;
  void clear_guess() ;
  const std::string& guess() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_guess(Arg_&& arg, Args_... args);
  std::string* mutable_guess();
  PROTOBUF_NODISCARD std::string* release_guess();
  void set_allocated_guess(std::string* ptr);

  private:
  const std::string& _internal_guess() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guess(
      const std::string& value);
  std::string* _internal_mutable_guess();

  public:
  // @@protoc_insertion_point(class_scope:message.HangmanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guess_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};// -------------------------------------------------------------------

class HangmanResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.HangmanResponse) */ {
 public:
  inline HangmanResponse() : HangmanResponse(nullptr) {}
  ~HangmanResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HangmanResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HangmanResponse(const HangmanResponse& from);
  HangmanResponse(HangmanResponse&& from) noexcept
    : HangmanResponse() {
    *this = ::std::move(from);
  }

  inline HangmanResponse& operator=(const HangmanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HangmanResponse& operator=(HangmanResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HangmanResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HangmanResponse* internal_default_instance() {
    return reinterpret_cast<const HangmanResponse*>(
               &_HangmanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HangmanResponse& a, HangmanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HangmanResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HangmanResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HangmanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HangmanResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HangmanResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HangmanResponse& from) {
    HangmanResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HangmanResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "message.HangmanResponse";
  }
  protected:
  explicit HangmanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
    kRemainingAttemptsFieldNumber = 2,
    kGameOverFieldNumber = 3,
  };
  // string word = 1;
  void clear_word() ;
  const std::string& word() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_word(Arg_&& arg, Args_... args);
  std::string* mutable_word();
  PROTOBUF_NODISCARD std::string* release_word();
  void set_allocated_word(std::string* ptr);

  private:
  const std::string& _internal_word() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_word(
      const std::string& value);
  std::string* _internal_mutable_word();

  public:
  // int32 remaining_attempts = 2;
  void clear_remaining_attempts() ;
  ::int32_t remaining_attempts() const;
  void set_remaining_attempts(::int32_t value);

  private:
  ::int32_t _internal_remaining_attempts() const;
  void _internal_set_remaining_attempts(::int32_t value);

  public:
  // bool game_over = 3;
  void clear_game_over() ;
  bool game_over() const;
  void set_game_over(bool value);

  private:
  bool _internal_game_over() const;
  void _internal_set_game_over(bool value);

  public:
  // @@protoc_insertion_point(class_scope:message.HangmanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
    ::int32_t remaining_attempts_;
    bool game_over_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HangmanRequest

// string guess = 1;
inline void HangmanRequest::clear_guess() {
  _impl_.guess_.ClearToEmpty();
}
inline const std::string& HangmanRequest::guess() const {
  // @@protoc_insertion_point(field_get:message.HangmanRequest.guess)
  return _internal_guess();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HangmanRequest::set_guess(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.guess_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.HangmanRequest.guess)
}
inline std::string* HangmanRequest::mutable_guess() {
  std::string* _s = _internal_mutable_guess();
  // @@protoc_insertion_point(field_mutable:message.HangmanRequest.guess)
  return _s;
}
inline const std::string& HangmanRequest::_internal_guess() const {
  return _impl_.guess_.Get();
}
inline void HangmanRequest::_internal_set_guess(const std::string& value) {
  ;


  _impl_.guess_.Set(value, GetArenaForAllocation());
}
inline std::string* HangmanRequest::_internal_mutable_guess() {
  ;
  return _impl_.guess_.Mutable( GetArenaForAllocation());
}
inline std::string* HangmanRequest::release_guess() {
  // @@protoc_insertion_point(field_release:message.HangmanRequest.guess)
  return _impl_.guess_.Release();
}
inline void HangmanRequest::set_allocated_guess(std::string* value) {
  _impl_.guess_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.guess_.IsDefault()) {
          _impl_.guess_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.HangmanRequest.guess)
}

// -------------------------------------------------------------------

// HangmanResponse

// string word = 1;
inline void HangmanResponse::clear_word() {
  _impl_.word_.ClearToEmpty();
}
inline const std::string& HangmanResponse::word() const {
  // @@protoc_insertion_point(field_get:message.HangmanResponse.word)
  return _internal_word();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HangmanResponse::set_word(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.word_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.HangmanResponse.word)
}
inline std::string* HangmanResponse::mutable_word() {
  std::string* _s = _internal_mutable_word();
  // @@protoc_insertion_point(field_mutable:message.HangmanResponse.word)
  return _s;
}
inline const std::string& HangmanResponse::_internal_word() const {
  return _impl_.word_.Get();
}
inline void HangmanResponse::_internal_set_word(const std::string& value) {
  ;


  _impl_.word_.Set(value, GetArenaForAllocation());
}
inline std::string* HangmanResponse::_internal_mutable_word() {
  ;
  return _impl_.word_.Mutable( GetArenaForAllocation());
}
inline std::string* HangmanResponse::release_word() {
  // @@protoc_insertion_point(field_release:message.HangmanResponse.word)
  return _impl_.word_.Release();
}
inline void HangmanResponse::set_allocated_word(std::string* value) {
  _impl_.word_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.word_.IsDefault()) {
          _impl_.word_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.HangmanResponse.word)
}

// int32 remaining_attempts = 2;
inline void HangmanResponse::clear_remaining_attempts() {
  _impl_.remaining_attempts_ = 0;
}
inline ::int32_t HangmanResponse::remaining_attempts() const {
  // @@protoc_insertion_point(field_get:message.HangmanResponse.remaining_attempts)
  return _internal_remaining_attempts();
}
inline void HangmanResponse::set_remaining_attempts(::int32_t value) {
  _internal_set_remaining_attempts(value);
  // @@protoc_insertion_point(field_set:message.HangmanResponse.remaining_attempts)
}
inline ::int32_t HangmanResponse::_internal_remaining_attempts() const {
  return _impl_.remaining_attempts_;
}
inline void HangmanResponse::_internal_set_remaining_attempts(::int32_t value) {
  ;
  _impl_.remaining_attempts_ = value;
}

// bool game_over = 3;
inline void HangmanResponse::clear_game_over() {
  _impl_.game_over_ = false;
}
inline bool HangmanResponse::game_over() const {
  // @@protoc_insertion_point(field_get:message.HangmanResponse.game_over)
  return _internal_game_over();
}
inline void HangmanResponse::set_game_over(bool value) {
  _internal_set_game_over(value);
  // @@protoc_insertion_point(field_set:message.HangmanResponse.game_over)
}
inline bool HangmanResponse::_internal_game_over() const {
  return _impl_.game_over_;
}
inline void HangmanResponse::_internal_set_game_over(bool value) {
  ;
  _impl_.game_over_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace message


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_message_2eproto_2epb_2eh
